
/*
 * Copyright (C) 1997 Massachusetts Institute of Technology 
 *
 * This software is being provided by the copyright holders under the
 * following license. By obtaining, using and/or copying this software,
 * you agree that you have read, understood, and will comply with the
 * following terms and conditions:
 *
 * Permission to use, copy, modify, distribute, and sell this software
 * and its documentation for any purpose and without fee or royalty is
 * hereby granted, provided that the full text of this NOTICE appears on
 * ALL copies of the software and documentation or portions thereof,
 * including modifications, that you make.
 *
 * THIS SOFTWARE IS PROVIDED "AS IS," AND COPYRIGHT HOLDERS MAKE NO
 * REPRESENTATIONS OR WARRANTIES, EXPRESS OR IMPLIED. BY WAY OF EXAMPLE,
 * BUT NOT LIMITATION, COPYRIGHT HOLDERS MAKE NO REPRESENTATIONS OR
 * WARRANTIES OF MERCHANTABILITY OR FITNESS FOR ANY PARTICULAR PURPOSE OR
 * THAT THE USE OF THE SOFTWARE OR DOCUMENTATION WILL NOT INFRINGE ANY
 * THIRD PARTY PATENTS, COPYRIGHTS, TRADEMARKS OR OTHER RIGHTS. COPYRIGHT
 * HOLDERS WILL BEAR NO LIABILITY FOR ANY USE OF THIS SOFTWARE OR
 * DOCUMENTATION.
 *
 * The name and trademarks of copyright holders may NOT be used in
 * advertising or publicity pertaining to the software without specific,
 * written prior permission. Title to copyright in this software and any
 * associated documentation will at all times remain with copyright
 * holders. See the file AUTHORS which should have accompanied this software
 * for a list of all copyright holders.
 *
 * This file may be derived from previously copyrighted software. This
 * copyright applies only to those changes made by the copyright
 * holders listed in the AUTHORS file. The rest of this file is covered by
 * the copyright notices, if any, listed below.
 */

/*
 * Exported DPF interface.
 */
#ifndef __OLD_DPF_H__
#define __OLD_DPF_H__

#include <dpf/action.h>

#if 0
/* error codes */
enum {
        DPF_SUCCESS = 1,
        DPF_INVALIDPID = -1,
        DPF_FILTER_OVERLAP = -2,
};
#endif


/* DPF ops. */
enum {
        DPF_NIL,
        /* nulary operators */
#       define DPF_NULARY_P(x) ((x) >= DPF_SHIFTI && (x) <= DPF_BITS32I)
        DPF_SHIFTI,
#       define DPF_BITS_P(x) ((x) >= DPF_BITS8I && (x) <= DPF_BITS32)
        DPF_BITS8I,
        DPF_BITS16I,
        DPF_BITS32I,
        /* unary operators (and operators with constant right operands) */
#       define DPF_UNARY_P(x) ((x) >= DPF_SHIFT && (x) <= DPF_BITS32)
        DPF_BITS8,
        DPF_BITS16,
        DPF_BITS32,
        DPF_SHIFT,
        DPF_EQI,
        DPF_NEI,
        DPF_ANDI,
        DPF_ORI,
        /* binary operators */
#       define DPF_BINARY_P(x) ((x) >= DPF_EQ && (x) <= DPF_OR)
        DPF_EQ,
        DPF_NE,
        DPF_AND,
        DPF_OR,
        /* n-ary operators */
        DPF_DEQ,                /* disjunction (hash table of values) */
        DPF_OROR,
        /* some ops used by the code generator */
        DPF_IMM,
        DPF_NOTHING,
        DPF_LAST
};

/* 
 * Swizzled filter form.  Generated by preprocessor.  
 */
struct dpf_frozen_ir {
        unsigned char   op,     /* the operator */
                        len;    /* length of conjunction or shift */
        signed char     r0,     /* kid numbers that we depend on (if any). */
                        r1;
        unsigned        imm;    /* immediate value (if any) */
};

extern int (*dpf_iptr)(unsigned char *msg, unsigned nbytes, struct frag_return *retmsg);

#endif /* __OLD_DPF_H__ */
